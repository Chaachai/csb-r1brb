{"version":3,"sources":["Adria-logo.png","App.js","index.js"],"names":["App","props","webcamRef","React","createRef","canvasRef","state","ocrResult","this","current","video","readyState","videoWidth","videoHeight","width","height","Modal","show","className","keyboard","Body","Row","Col","xs","md","style","fontSize","loadingMessage","Navbar","bg","variant","Brand","alt","src","logo","Container","fluid","sm","ref","muted","audio","screenshotFormat","videoConstraints","facingMode","zindex","position","left","top","margin","disabled","onChange","e","console","log","target","name","value","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"2YAAe,MAA0B,uC,QC6BpBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,UAAYC,IAAMC,UAAU,MACjC,EAAKC,UAAYF,IAAMC,UAAU,MACjC,EAAKE,MAAQ,CAMXC,UAAW,IAVI,E,qDAmEnB,WAGE,GACoC,qBAA3BC,KAAKN,UAAUO,SACK,OAA3BD,KAAKN,UAAUO,SAC6B,IAA5CD,KAAKN,UAAUO,QAAQC,MAAMC,WAC7B,CACcH,KAAKN,UAAUO,QAAQC,MACtBF,KAAKH,UAAUI,QAD9B,IAIMG,EAAaJ,KAAKN,UAAUO,QAAQC,MAAME,WAC1CC,EAAcL,KAAKN,UAAUO,QAAQC,MAAMG,YAGjDL,KAAKN,UAAUO,QAAQC,MAAMI,MAAQF,EACrCJ,KAAKN,UAAUO,QAAQC,MAAMK,OAASF,EAGtCL,KAAKH,UAAUI,QAAQK,MAAQF,EAC/BJ,KAAKH,UAAUI,QAAQM,OAASF,K,oBAuGpC,WAIE,OACE,gCACE,cAACG,EAAA,EAAD,CAAOC,MAAM,EAAOC,UAAU,eAAeC,UAAU,EAAvD,SACE,cAACH,EAAA,EAAMI,KAAP,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAjB,SACE,qBAAKN,UAAU,UAAf,SACE,sBAAMO,MAAO,CAAEC,SAAU,QAAzB,SACGlB,KAAKF,MAAMqB,2BAQxB,cAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,QAAQ,QAA3B,SACE,cAACF,EAAA,EAAOG,MAAR,UACE,qBACEC,IAAI,GACJC,IAAKC,EACLpB,MAAM,MACNC,OAAO,KACPG,UAAU,iCAahB,cAACiB,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACE,eAACf,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKe,GAAG,KAAKb,GAAG,IAAhB,SACE,gCACE,cAAC,IAAD,CACEc,IAAK9B,KAAKN,UACVqC,OAAO,EACPC,OAAO,EACPC,iBAAiB,YACjBC,iBAhDW,CACvBC,WAAY,eAiDAlB,MAAO,CASLmB,OAAQ,EACR9B,MAAO,OACPC,OAAQ,UAGZ,wBACEuB,IAAK9B,KAAKH,UACVoB,MAAO,CAELoB,SAAU,WAGVC,KAAM,EACNC,IAAK,EAGLH,OAAQ,EACR9B,MAAO,OACPC,OAAQ,eAKhB,cAACO,EAAA,EAAD,CAAKe,GAAG,KAAKb,GAAG,IAAhB,SACE,8BACE,0BACEC,MAAO,CACLuB,OAAQ,QACRlC,MAAO,OACPC,OAAQ,QACRW,SAAU,QAEZuB,UAAQ,EACRC,SAAU,SAACC,GACTC,QAAQC,IAAIF,EAAEG,OAAOC,OAEvBC,MAAOhD,KAAKF,MAAMC,4B,GAhSHkD,aCxB3BC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFJ,K","file":"static/js/main.c588d724.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Adria-logo.bd5e5e0d.png\";","import React, { Component } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\nimport Webcam from \"react-webcam\";\nimport { createWorker, createScheduler } from \"tesseract.js\";\nimport { drawRect } from \"./utilities\";\nimport \"./App.css\";\n// import Navbar from 'react-bootstrap/Navbar';\n// import Modal from 'react-bootstrap/Modal';\nimport {\n  Row,\n  Col,\n  Container,\n  Nav,\n  Navbar,\n  NavDropdown,\n  Modal,\n  Button\n} from \"react-bootstrap\";\nimport logo from \"./Adria-logo.png\";\n\n// const scheduler = createScheduler();\n\n// const worker = createWorker({\n//   logger: m => console.log(m),\n// });\n\n// let timerId = null;\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.webcamRef = React.createRef(null);\n    this.canvasRef = React.createRef(null);\n    this.state = {\n      // loading: true,\n      // loadingMessage: \"\",\n      // cocoActive: false,\n      // ocrActive: false,\n      // imageSrc: \"\",\n      ocrResult: \"\"\n      // progress: 0,\n    };\n    // this.doOCR = this.doOCR.bind(this);\n    // this.runCoco = this.runCoco.bind(this);\n    // this.detect = this.detect.bind(this);\n    // this.handleObjectDetectionClick = this.handleObjectDetectionClick.bind(this);\n    // this.handleTesseractClick = this.handleTesseractClick.bind(this);\n    // this.handleCaptureClick = this.handleCaptureClick.bind(this);\n    // this.handleRetryClick = this.handleRetryClick.bind(this);\n  }\n\n  // async runCoco() {\n  //   this.setState({loadingMessage: 'Loading the model...', loading: true});\n  //   const net = await cocossd.load();\n  //   console.log(\"Handpose model loaded.\");\n  //   this.setState({loadingMessage: 'Loading...', loading: false});\n  //   //  Loop and detect hands\n  //   setInterval(() => {\n  //     if(this.state.cocoActive === true && this.state.ocrActive === false) this.detect(net);\n  //   }, 10);\n  // };\n\n  // async detect(net) {\n  //   // console.log(this.webcamRef.current.video);\n  //   // console.log(this.webcamRef.current.video.readyState);\n  //   // debugger;\n  //   //Check data is available\n  //   if (\n  //     typeof this.webcamRef.current !== \"undefined\" &&\n  //     this.webcamRef.current !== null &&\n  //     this.webcamRef.current.video.readyState === 4\n  //   ) {\n  //     // Get Video Properties\n  //     const video = this.webcamRef.current.video;\n  //     const videoWidth = this.webcamRef.current.video.videoWidth;\n  //     const videoHeight = this.webcamRef.current.video.videoHeight;\n\n  //     // Set video width\n  //     this.webcamRef.current.video.width = videoWidth;\n  //     this.webcamRef.current.video.height = videoHeight;\n\n  //     // Set canvas height and width\n  //     this.canvasRef.current.width = videoWidth;\n  //     this.canvasRef.current.height = videoHeight;\n\n  //     // Make Detections\n  //     const obj = await net.detect(video);\n\n  //     // console.log(obj);\n\n  //     // Draw mesh\n  //     const ctx = this.canvasRef.current.getContext(\"2d\");\n  //     drawRect(obj, ctx);\n  //   }\n  // };\n\n  componentDidMount() {\n    // this.setState({loading: false, loadingMessage: ''})\n    // this.runCoco();\n    if (\n      typeof this.webcamRef.current !== \"undefined\" &&\n      this.webcamRef.current !== null &&\n      this.webcamRef.current.video.readyState === 4\n    ) {\n      const video = this.webcamRef.current.video;\n      const canvas = this.canvasRef.current;\n\n      // Get Video Properties\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n\n      // Set video width\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      this.canvasRef.current.width = videoWidth;\n      this.canvasRef.current.height = videoHeight;\n    }\n  }\n\n  // setWebcamRef(webcamRef) {\n  //   this.setState({webcamRef: webcamRef})\n  // }\n\n  // setCanvasRef(canvasRef) {\n  //   this.setState({canvasRef: canvasRef})\n  // }\n\n  // async doOCR () {\n  //   if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n  //   // if (this.state.imageSrc !== null && this.state.imageSrc !== \"\") {\n\n  //     const video = this.webcamRef.current.video;\n  //     const canvas = this.canvasRef.current;\n\n  //      // Get Video Properties\n  //     const videoWidth = this.webcamRef.current.video.videoWidth;\n  //     const videoHeight = this.webcamRef.current.video.videoHeight;\n\n  //     // Set video width\n  //     this.webcamRef.current.video.width = videoWidth;\n  //     this.webcamRef.current.video.height = videoHeight;\n\n  //     // Set canvas height and width\n  //     canvas.width = videoWidth;\n  //     canvas.height = videoHeight;\n\n  //     const ctx = canvas.getContext(\"2d\");\n  //     ctx.drawImage(video, 0, 0, videoWidth, videoHeight);\n\n  //     const { data: { text } } = await scheduler.addJob('recognize', canvas);\n\n  //     // text.split('\\n').forEach((line) => {\n  //     if(text && text !== \"\" && text.length > 0)\n  //       this.setState({ocrResult: text});\n  //     // });\n\n  //     // const worker = createWorker();\n  //     // this.setState({loading: true, })\n  //     // const worker = createWorker({\n  //     //   logger: m => {\n  //     //     console.log(m);\n  //     //     this.setState({loadingMessage: m.status + \"... \" + (m.progress * 100).toFixed(1) + \"%\" });\n  //     //   }\n  //     // });\n  //     // await worker.load();\n  //     // await worker.loadLanguage('fra');\n  //     // await worker.initialize('fra');\n  //     // const { data: { text } } = await worker.recognize(this.state.imageSrc);\n  //     // this.setState({ocrResult: text, loading: false, loadingMessage: \"\"});\n  //   }\n  // };\n\n  // async runOcr () {\n  //   this.setState({loadingMessage: 'Loading the Tesseract...', loading: true});\n  //   // this.setState({ocr: 'Initializing Tesseract.js'});\n  //   for (let i = 0; i < 4; i++) {\n  //     const worker = createWorker();\n  //     await worker.load();\n  //     await worker.loadLanguage('fra');\n  //     await worker.initialize('fra');\n  //     scheduler.addWorker(worker);\n  //   }\n  //   this.setState({loadingMessage: '', loading: false});\n\n  //     // this.doOCR();\n  //     // this.webcamRef.addEventListener('play', () => {\n  //   setInterval(() => {\n  //     if(this.state.ocrActive === true && this.state.cocoActive === false) this.doOCR();\n  //   }, 200);\n  //     // });\n  //     // this.webcamRef.addEventListener('pause', () => {\n  //       clearInterval(timerId);\n  //     // });\n  //     // this.webcamRef.controls = true\n  // };\n\n  // handleObjectDetectionClick(e){\n  //   e.preventDefault();\n  //   this.setState({cocoActive: true, ocrActive: false, imageSrc: \"\"}, this.runCoco);\n  // }\n\n  // handleTesseractClick(e){\n  //   e.preventDefault();\n  //   this.setState({cocoActive: false, ocrActive: true, imageSrc: \"\"}, this.runOcr);\n  // }\n\n  // handleCaptureClick(e){\n  //   e.preventDefault();\n  //   let imageSrc = this.webcamRef.current.getScreenshot();\n  //   console.log(\"imageSrc === \", imageSrc);\n  //   this.setState({imageSrc: imageSrc, ocrResult: \"\"}, this.doOCR);\n  // }\n\n  // handleRetryClick(e){\n  //   e.preventDefault();\n  //   this.setState({imageSrc: \"\", ocrActive: true, cocoActive: false});\n  // }\n\n  render() {\n    const videoConstraints = {\n      facingMode: \"environment\"\n    };\n    return (\n      <div>\n        <Modal show={false} className=\"loadingModal\" keyboard={false}>\n          <Modal.Body>\n            <Row>\n              <Col xs={12} md={12}>\n                <div className=\"spinner\">\n                  <span style={{ fontSize: \"11px\" }}>\n                    {this.state.loadingMessage}\n                  </span>\n                </div>\n              </Col>\n            </Row>\n          </Modal.Body>\n        </Modal>\n\n        <Navbar bg=\"light\" variant=\"light\">\n          <Navbar.Brand>\n            <img\n              alt=\"\"\n              src={logo}\n              width=\"135\"\n              height=\"43\"\n              className=\"d-inline-block align-top\"\n            />\n          </Navbar.Brand>\n          {/* <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav>\n            <NavDropdown title=\"Tesseract JS\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Tesseract JS</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">Tenserflow JS</NavDropdown.Item>\n            </NavDropdown>\n            </Nav>\n          </Navbar.Collapse> */}\n        </Navbar>\n\n        <Container fluid>\n          <Row>\n            <Col sm=\"12\" md=\"6\">\n              <div>\n                <Webcam\n                  ref={this.webcamRef}\n                  muted={true}\n                  audio={false}\n                  screenshotFormat=\"image/png\"\n                  videoConstraints={videoConstraints}\n                  // forceScreenshotSourceSize=\"true\"\n                  style={{\n                    // margin: \"2px 0\",\n                    // opacity: \"20%\",\n                    // position: \"absolute\",\n                    // marginLeft: \"auto\",\n                    // marginRight: \"auto\",\n                    // left: 0,\n                    // right: 0,\n                    // textAlign: \"center\",\n                    zindex: 9,\n                    width: \"100%\",\n                    height: \"auto\"\n                  }}\n                />\n                <canvas\n                  ref={this.canvasRef}\n                  style={{\n                    // backgroundColor: \"red\",\n                    position: \"absolute\",\n                    // marginLeft: \"auto\",\n                    // marginRight: \"auto\",\n                    left: 0,\n                    top: 0,\n                    // right: 0,\n                    // textAlign: \"center\",\n                    zindex: 8,\n                    width: \"100%\",\n                    height: \"auto\"\n                  }}\n                />\n              </div>\n            </Col>\n            <Col sm=\"12\" md=\"6\">\n              <div>\n                <textarea\n                  style={{\n                    margin: \"5px 0\",\n                    width: \"100%\",\n                    height: \"282px\",\n                    fontSize: \"13px\"\n                  }}\n                  disabled\n                  onChange={(e) => {\n                    console.log(e.target.name);\n                  }}\n                  value={this.state.ocrResult}\n                />\n              </div>\n            </Col>\n          </Row>\n        </Container>\n\n        {/* <footer>\n          <p>Adria Business & Technology</p>\n          <p>2021 © All rights reserved</p>\n        </footer> */}\n      </div>\n    );\n  }\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}